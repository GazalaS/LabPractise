#BlueJ class context
comment0.target=TrackReader
comment0.text=\n\ A\ helper\ class\ for\ our\ music\ application.\ This\ class\ can\ read\ files\ from\ the\ file\ system\n\ from\ a\ given\ folder\ with\ a\ specified\ suffix.\ It\ will\ interpret\ the\ file\ name\ as\ artist/\n\ track\ title\ information.\n\ \n\ It\ is\ expected\ that\ file\ names\ of\ music\ tracks\ follow\ a\ standard\ format\ of\ artist\ name\n\ and\ track\ name,\ separated\ by\ a\ dash.\ For\ example\:\ TheBeatles-HereComesTheSun.mp3\n\ \n\ @author\ David\ J.\ Barnes\ and\ Michael\ K\u00F6lling\n\ @version\ 2016.02.29\n
comment1.params=
comment1.target=TrackReader()
comment1.text=\n\ Create\ the\ track\ reader,\ ready\ to\ read\ tracks\ from\ the\ music\ library\ folder.\n
comment2.params=folder\ suffix
comment2.target=java.util.ArrayList\ readTracks(java.lang.String,\ java.lang.String)
comment2.text=\n\ Read\ music\ files\ from\ the\ given\ library\ folder\n\ with\ the\ given\ suffix.\n\ @param\ folder\ The\ folder\ to\ look\ for\ files.\n\ @param\ suffix\ The\ suffix\ of\ the\ audio\ type.\n
comment3.params=file
comment3.target=Track\ decodeDetails(java.io.File)
comment3.text=\n\ Try\ to\ decode\ details\ of\ the\ artist\ and\ the\ title\n\ from\ the\ file\ name.\n\ It\ is\ assumed\ that\ the\ details\ are\ in\ the\ form\:\n\ \ \ \ \ artist-title.mp3\n\ @param\ file\ The\ track\ file.\n\ @return\ A\ Track\ containing\ the\ details.\n
numComments=4
